package net.pursue.ui.client.exploit;

import net.minecraft.client.Minecraft;
import net.minecraft.client.audio.PositionedSoundRecord;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.init.SoundEvents;
import net.minecraft.util.ResourceLocation;
import net.pursue.Nattalie;
import net.pursue.config.ConfigManager;
import net.pursue.shield.IsShield;
import net.pursue.ui.client.MainMenu;
import net.pursue.ui.font.FontManager;
import net.pursue.ui.guiButton.DelayTextField;
import net.pursue.utils.client.DebugHelper;
import net.pursue.utils.client.HWIDManager;
import net.pursue.utils.render.AnimationUtils;
import net.pursue.utils.render.RoundedUtils;
import org.bytedeco.javacv.FFmpegFrameGrabber;

import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.lwjgl.opengl.GL11.GL_ONE_MINUS_SRC_ALPHA;
import static org.lwjgl.opengl.GL11.GL_SRC_ALPHA;

@IsShield
public class Disclaimer extends GuiScreen {

    private final List<DelayTextField> disclaimer = new ArrayList<>();

    float currentX = 0f;
    float currentY = 0f;
    private String string = "请输入你的账号信息吧~";
    private boolean click = false;
    private double animationX = width;

    @Override
    public void initGui() {
        disclaimer.add(new DelayTextField(11, Minecraft.getMinecraft().fontRendererObj, this.width / 2 + 50, this.height / 2 + 62,100,20, 0, false));
        disclaimer.add(new DelayTextField(12, Minecraft.getMinecraft().fontRendererObj, this.width / 2 + 50, this.height / 2 + 87,100,20, 0, true));
        String[] previousCredentials = HWIDManager.loadCredentials();

        for (DelayTextField tf : disclaimer) {
            tf.setMaxStringLength(20);

            if (tf.getId() == 11) {
                tf.setText(previousCredentials[0]);
            }
            if (tf.getId() == 12) {
                tf.setText(previousCredentials[1]);
            }
        }

        Nattalie.instance.getOldGUI().sb = previousCredentials[3].isEmpty() || previousCredentials[3].equals("true") || !previousCredentials[3].equals("false");

        super.initGui();
    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        float xDiff = ((mouseX - (this.height / 2.0f)) - this.currentX) / new ScaledResolution(this.mc).getScaleFactor();
        float yDiff = ((mouseY - (this.width / 2.0f)) - this.currentY) / new ScaledResolution(this.mc).getScaleFactor();

        this.currentX += xDiff * 0.3f;
        this.currentY += yDiff * 0.3f;

        GlStateManager.enableBlend();
        GlStateManager.blendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
        mc.getTextureManager().bindTexture(new ResourceLocation("nattalie/png/back.png"));
        GlStateManager.translate(this.currentX / 30.0f, this.currentY / 15.0f, 0.0f);
        this.drawModalRectWithCustomSizedTexture(-30,-30,0,0, width + 60, height + 60, width + 60, height + 60);
        GlStateManager.translate(-this.currentX / 30.0f, -this.currentY / 15.0f, 0.0f);
        GlStateManager.disableBlend();

        super.drawScreen(mouseX, mouseY, partialTicks);

        Color StringColor = Color.BLACK;


        this.animationX = AnimationUtils.smooth((float) (width / 2 - 50), animationX, 8f / Minecraft.getDebugFPS());

        RoundedUtils.drawRound((float) animationX, (float) height / 2 + 40, 230, 100, 2, new Color(0, 154, 255, 160));

        if (this.animationX == (float) (width / 2 - 50)) {

            for (DelayTextField tf : disclaimer) {
                tf.drawTextBox();
            }

            GlStateManager.enableBlend();
            GlStateManager.blendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
            FontManager.font20.drawString(string, width / 2 - 45, (float) (height / 2 + 45), new Color(255, 255, 255).getRGB());

            FontManager.font20.drawString("-禁止中文- 账号：", width / 2 - 45, (float) (height / 2 + 70), new Color(255, 255, 255).getRGB());
            FontManager.font20.drawString("-禁止中文- 密码：", width / 2 - 45, (float) (height / 2 + 95), new Color(255, 255, 255).getRGB());
            String userName = "";
            String keyName = "";
            for (DelayTextField tf : disclaimer) {

                if (tf.getId() == 11) {
                    userName = tf.getText();
                }

                if (tf.getId() == 12) {
                    keyName = tf.getText();
                }
            }

            RoundedUtils.drawRound_Rectangle(FontManager.font20, "登入", width / 2 - 38, (float) (height / 2 + 125), 2, StringColor, Color.WHITE, 10, 6, true);

            if (isHovering(width / 2 - 38, (float) (height / 2 + 125), RoundedUtils.width, RoundedUtils.height, mouseX, mouseY)) {
                if (click) {
                    if (!userName.isEmpty() && !keyName.isEmpty() && HWIDManager.checkHWIDWithRemote(userName, keyName, Minecraft.getMinecraft().hwid)) {
                        HWIDManager.saveCredentials(userName, keyName, ConfigManager.configName, Nattalie.instance.getOldGUI().sb);
                        Nattalie.USERNAME = userName;
                        Nattalie.KEY = keyName;
                        DebugHelper.displayTray("账号验证", "验证通过~，欢迎您！" + userName, TrayIcon.MessageType.INFO);
                        string = "验证成功呢~";

                        new Thread(() -> {
                            try {
                                Thread.sleep(1000L);

                                try {
                                    Nattalie.instance.getPlayer().init(new File(new File(Minecraft.getMinecraft().mcDataDir, Nattalie.instance.getClientName() + "/Video"), "miyabi.mp4"), "Verify");
                                } catch (FFmpegFrameGrabber.Exception e) {
                                    throw new RuntimeException(e);
                                }

                                if (Minecraft.getMinecraft().serverName != null) {
                                    Minecraft.getMinecraft().displayGuiScreen(new GuiConnecting(new MainMenu(), Minecraft.getMinecraft(), Minecraft.getMinecraft().serverName, Minecraft.getMinecraft().serverPort));
                                } else {
                                    Minecraft.getMinecraft().displayGuiScreen(new MainMenu());
                                }
                            } catch (InterruptedException ex) {
                                ex.printStackTrace();
                            }
                        }).start();
                    } else {
                        string = "账号不存在或密码错误！";
                    }
                    mc.getSoundHandler().playSound(PositionedSoundRecord.getMasterRecord(SoundEvents.UI_BUTTON_CLICK, 1.0F));
                    click = false;
                }
            }

            RoundedUtils.drawRound_Rectangle(FontManager.font20, "注册", width / 2, (float) (height / 2 + 125), 2, StringColor, Color.WHITE, 10, 6, true);

            if (isHovering(width / 2, (float) (height / 2 + 125), RoundedUtils.width, RoundedUtils.height, mouseX, mouseY)) {
                if (click) {
                    if (userName.isEmpty() || keyName.isEmpty() || HWIDManager.NewUserEqualsOldUser(userName)) {
                        string = "你并未输入任何账号和密码或你的账号与其他人冲突！";
                    } else {
                        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(userName + "-" + keyName + "-" + Minecraft.getMinecraft().hwid), null);

                        string = "已经将账号和密码复制到剪切板了~";

                        new Thread(() -> {
                            try {
                                Thread.sleep(1000L);
                                System.exit(0);
                            } catch (InterruptedException ex) {
                                ex.printStackTrace();
                            }
                        }).start();
                    }
                    mc.getSoundHandler().playSound(PositionedSoundRecord.getMasterRecord(SoundEvents.UI_BUTTON_CLICK, 1.0F));
                    click = false;
                }
            }

            RoundedUtils.drawRound_Rectangle(FontManager.font20, "退出", width / 2 + 58, (float) (height / 2 + 125), 2, StringColor, Color.WHITE, 10, 6, true);

            if (isHovering(width / 2 + 38, (float) (height / 2 + 125), RoundedUtils.width, RoundedUtils.height, mouseX, mouseY)) {
                if (click) {

                    string = "这就不想玩了吗qwq";

                    new Thread(() -> {
                        try {
                            Thread.sleep(1000L);
                            System.exit(0);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }).start();
                    mc.getSoundHandler().playSound(PositionedSoundRecord.getMasterRecord(SoundEvents.UI_BUTTON_CLICK, 1.0F));
                    click = false;
                }
            }

            GlStateManager.disableBlend();
        }
    }

    @Override
    protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
        if (mouseButton == 0) {
            click = true;
        }
        for (DelayTextField tf : disclaimer) {
            tf.mouseClicked(mouseX, mouseY, mouseButton);
        }
        super.mouseClicked(mouseX, mouseY, mouseButton);
    }

    @Override
    protected void mouseReleased(int mouseX, int mouseY, int state) {
        click = false;
        super.mouseReleased(mouseX, mouseY, state);
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) throws IOException {
        for (DelayTextField tf : disclaimer) {
            tf.textboxKeyTyped(typedChar, keyCode);
        }
        if (keyCode == 1) {
        } else {
            super.keyTyped(typedChar, keyCode);
        }
    }
}
