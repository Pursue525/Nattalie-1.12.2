package net.pursue.ui.client.exploit;

import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.util.text.TextFormatting;
import net.pursue.Nattalie;
import net.pursue.ui.font.FontManager;
import net.pursue.utils.render.AnimationUtils;
import net.pursue.utils.render.RoundedUtils;
import org.lwjgl.opengl.GL11;

import java.awt.*;
import java.io.IOException;

public class Setting extends GuiScreen {

    private double animationA;

    @Override
    public void initGui() {
        animationA = 0;

        this.buttonList.add(new GuiButton(1, width / 2 - 170, height / 2 + 10, 150, 20, "启用模糊"));
        this.buttonList.add(new GuiButton(2, width / 2 + 20, height / 2 + 10, 150, 20, "不启用模糊"));
        super.initGui();
    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        animationA = AnimationUtils.moveUD((float) animationA, (float) 255, (float) (5 * RoundedUtils.deltaTime()), (float) (4 * RoundedUtils.deltaTime()));

        RoundedUtils.drawRound(0,0,width,height,0, new Color(0,0,0, (int) animationA));

        super.drawScreen(mouseX,mouseY, partialTicks);

        String s = hasGraphicsCard() ? TextFormatting.GREEN + "True" : TextFormatting.RED + "False";

        FontManager.font40.drawString("在正式游玩之前，你得做出选择！", width / 2 - FontManager.font40.getStringWidth("在正式游玩之前，你得做出选择！") / 2, height / 2 - 50, Color.WHITE);
        FontManager.font24.drawString("显卡状态: " + s,width / 2 - FontManager.font24.getStringWidth("显卡状态: " + hasGraphicsCard()) / 2, height / 2 - 20, Color.WHITE);
        FontManager.font20.drawString(getHardwareInfo(), 10, height - FontManager.font20.getHeight() - 10, Color.GRAY);
    }

    @Override
    protected void actionPerformed(GuiButton button) throws IOException {
        if (button.id == 1) {
            Nattalie.blur = true;
            mc.displayGuiScreen(new Disclaimer());
        } else if (button.id == 2) {
            Nattalie.blur = false;
            mc.displayGuiScreen(new Disclaimer());
        }
    }

    private boolean hasGraphicsCard() {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] devices = ge.getScreenDevices();

        for (GraphicsDevice device : devices) {
            if (device.getType() == GraphicsDevice.TYPE_RASTER_SCREEN) {
                return true;
            }
        }
        return false;
    }

    public static String getHardwareInfo() {
        String gpuName = GL11.glGetString(GL11.GL_RENDERER);

        if (gpuName != null && !gpuName.isEmpty()) {
            if (gpuName.toLowerCase().contains("amd")) {
                return "Renderer: " + TextFormatting.RED + gpuName;
            } else if (gpuName.toLowerCase().contains("nvidia")) {
                return "Renderer: " + TextFormatting.GREEN + gpuName;
            } else {
                return "Renderer: " + gpuName;
            }
        } else {
            String cpuInfo = System.getenv("PROCESSOR_IDENTIFIER");
            if (cpuInfo != null && !cpuInfo.isEmpty()) {
                return "CPU名称: " + cpuInfo;
            } else {
                return "无法获取硬件信息";
            }
        }
    }
}
