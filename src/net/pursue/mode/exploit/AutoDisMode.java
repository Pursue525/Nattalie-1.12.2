package net.pursue.mode.exploit;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketChatMessage;
import net.minecraft.network.play.server.SPacketChat;
import net.pursue.Nattalie;
import net.pursue.event.EventTarget;
import net.pursue.event.packet.EventPacket;
import net.pursue.mode.Mode;
import net.pursue.mode.combat.KillAura;
import net.pursue.mode.combat.Velocity;
import net.pursue.mode.move.Speed;
import net.pursue.mode.player.*;
import net.pursue.utils.category.Category;
import net.pursue.value.values.BooleanValue;

import java.util.regex.Pattern;

public class AutoDisMode extends Mode {
    private final BooleanValue<Boolean> disKillAura = new BooleanValue<>(this, "Disable KillAura", true);
    private final BooleanValue<Boolean> disScaffold = new BooleanValue<>(this, "Disable Scaffold", true);
    private final BooleanValue<Boolean> disVelocity = new BooleanValue<>(this, "Disable Velocity", false);
    private final BooleanValue<Boolean> disChestAura = new BooleanValue<>(this, "Disable ChestAura", true);
    private final BooleanValue<Boolean> disAutoHeal = new BooleanValue<>(this, "Disable AutoHeal", true);
    private final BooleanValue<Boolean> disStealer = new BooleanValue<>(this, "Disable ChesStealer", true);
    private final BooleanValue<Boolean> disManager = new BooleanValue<>(this, "Disable InvManager", true);
    private final BooleanValue<Boolean> disSpeed = new BooleanValue<>(this, "Disable Speed", false);
    private final BooleanValue<Boolean> autoHUB = new BooleanValue<>(this, "AutoHUB", true);

    public AutoDisMode(){
        super("AutoDisMode", "自动关闭功能", "玩家死亡后关闭或者游戏结束自动关闭功能", Category.EXPLOIT);
    }

    @EventTarget
    private void onPacket(EventPacket eventPacket) {
        Packet<?> packet = eventPacket.getPacket();

        if (mc.player == null) return;

        if (packet instanceof SPacketChat s02PacketChat) {
            if (s02PacketChat.getChatComponent().getUnformattedText().contains("获得胜利!") || s02PacketChat.getChatComponent().getUnformattedText().contains("游戏开始 ...") || s02PacketChat.getChatComponent().getUnformattedText().contains("你现在是观察者状态. 按E打开菜单.") || s02PacketChat.getChatComponent().getUnformattedText().contains("/spawn 可以退出观察者模式")) {
                dis();

                if (s02PacketChat.getChatComponent().getUnformattedText().contains("获得胜利!")) {
                    if (autoHUB.getValue()) mc.player.connection.sendPacket(new CPacketChatMessage("/hub"));
                }
            }
            if (Pattern.compile("你在地图(.*?)中赢得了(.*?)").matcher(s02PacketChat.getChatComponent().getUnformattedText()).find() || s02PacketChat.getChatComponent().getUnformattedText().contains("你现在是观察者状态. 按E打开菜单.")) {
                dis();

                if (autoHUB.getValue()) mc.player.connection.sendPacket(new CPacketChatMessage("/hub"));
            }
        } else if (!mc.player.isEntityAlive() || mc.player.ticksExisted <= 1 || mc.player.isPlayerSleeping() || mc.player.isSpectator()) {
            dis();
        }
    }


    public void dis() {
        if (Nattalie.instance.getModeManager().getByClass(KillAura.class).isEnable() && disKillAura.getValue()) Nattalie.instance.getModeManager().getByClass(KillAura.class).setEnable(false);
        if (Nattalie.instance.getModeManager().getByClass(Scaffold.class).isEnable() && disScaffold.getValue()) Nattalie.instance.getModeManager().getByClass(Scaffold.class).setEnable(false);
        if (Nattalie.instance.getModeManager().getByClass(AutoHeal.class).isEnable() && disAutoHeal.getValue()) Nattalie.instance.getModeManager().getByClass(AutoHeal.class).setEnable(false);
        if (Nattalie.instance.getModeManager().getByClass(InvManager.class).isEnable() && disManager.getValue()) Nattalie.instance.getModeManager().getByClass(InvManager.class).setEnable(false);
        if (Nattalie.instance.getModeManager().getByClass(ContainerAura.class).isEnable() && disChestAura.getValue()) Nattalie.instance.getModeManager().getByClass(ContainerAura.class).setEnable(false);
        if (Nattalie.instance.getModeManager().getByClass(Stealer.class).isEnable() && disStealer.getValue()) Nattalie.instance.getModeManager().getByClass(Stealer.class).setEnable(false);

        if (Nattalie.instance.getModeManager().getByClass(Speed.class).isEnable() && disSpeed.getValue()) Nattalie.instance.getModeManager().getByClass(Speed.class).setEnable(false);
        if (Nattalie.instance.getModeManager().getByClass(Velocity.class).isEnable() && disVelocity.getValue()) Nattalie.instance.getModeManager().getByClass(Velocity.class).setEnable(false);
    }
}
